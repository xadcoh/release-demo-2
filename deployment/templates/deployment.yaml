---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "client-app.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "client-app.name" . }}
    helm.sh/chart: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ pluck .Values.global.env .Values.replicaCount | first }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "client-app.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        app.kubernetes.io/name: {{ include "client-app.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      # With replicaCount=2 podAntiAffinity will work only if we have 3+ nodes
      # This could be a problem at rollout update - we must have node without scheduled replica of this deployment
      # When replicaCount >= 3 we won't be able to update because we will have replica per node
      # Also we must override this for test/dev environment where we have only few nodes
      {{- $podAntiAffinity := pluck $.Values.global.env .Values.podAntiAffinity | first }}
      {{- if $podAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - {{ .Values.componentName }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if .Values.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.pullSecret }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        resources:
          requests:
            memory: {{ pluck .Values.global.env .Values.resources.requests.memory | first | quote }}
            cpu: {{ pluck .Values.global.env .Values.resources.requests.cpu | first | quote }}
          limits:
            memory: {{ pluck .Values.global.env .Values.resources.limits.memory | first | quote }}
            cpu: {{ pluck .Values.global.env .Values.resources.limits.cpu | first | quote }}
        image: "{{ .Values.image }}"
        imagePullPolicy: {{ default "Always" .Values.pullPolicy }}
        ports:
        - containerPort: {{ default 8080 .Values.deployment.port }}
        readinessProbe:
          httpGet:
            path: /
            port: {{ default 8080 .Values.deployment.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
        livenessProbe:
          httpGet:
            path: /
            port: {{ default 8080 .Values.deployment.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          privileged: false
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          #fsGroup: 10001
        env:
          {{- range $key, $val := pluck $.Values.global.env .Values.env | first }}
          - name: {{ $key }}
            value: {{ $val }}
          {{- end }}
        volumeMounts:
        - mountPath: /tmp
          name: cache-volume
        - name: config-volume
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: cache-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: {{ include "client-app.fullname" . }}-config